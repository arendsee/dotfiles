# borrowing from:
# https://gist.github.com/snuggs/800936#file-tmux-conf

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Avoid delay when hitting ESC
# NOTE: this also breaks key sequences that use ESC
set -s escape-time 0

# # Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-selection

set-option -g history-limit 25000

# try "xterm-256color" or "screen-256color"
set-option -g default-terminal "xterm-256color" 

set-option -g pane-active-border-fg green

# # utf8 support
# set-window-option -g utf8 on
# # not sure why ...
# set-window-option -g xterm-keys on

# use mode vi in copy or choice modes
set-window-option -g mode-keys vi
set-window-option -g monitor-activity on
set-window-option -g window-status-current-fg white
setw -g window-status-current-attr reverse

# Automatically set window title
setw -g automatic-rename

# vi movement keys
# set-option -g status-keys vi

# create new window in same path
bind c new-window -c "#{pane_current_path}"


# ==========================================================================
# Status Bar
# ==========================================================================
set -g status off


# ==========================================================================
# Key Bindings
# ==========================================================================

#unbind [ # copy mode bound to escape key
unbind j

# unbind horizontal split
unbind '"'                 
# unbind vertical split
unbind %                   

# rebind, split pane horizontally
bind-key 9 split-window -v -c "#{pane_current_path}" 
# rebind, split pane vertically
bind-key 0 split-window -h -c "#{pane_current_path}"



# # promote a pane to its own window
# bind-key Enter break-pane

#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"

# # %% = prompt for window.pane [-V|H] # vert|hor split
# bind-key Space command-prompt "joinp -t:%%" 


# ==========================================================================
# windows
# ==========================================================================
set-window-option -g window-status-current-bg red
bind-key C-p previous-window
bind-key C-n next-window

# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session, even if both clients are looking
# at different windows.  It seems that in this particular case, Screen has the
# better default where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on


# ==========================================================================
# Panes
# ==========================================================================
# Navigation ---------------------------------------------------------------
# # use the vim motion keys to move between panes
# bind-key h select-pane -L
# bind-key j select-pane -D
# bind-key k select-pane -U
# bind-key l select-pane -R

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"



# Resizing ---------------------------------------------------------------
bind-key h resize-pane -L 10
bind-key j resize-pane -D 10
bind-key k resize-pane -U 10
bind-key l resize-pane -R 10
