# Adapted from:
# https://gist.github.com/snuggs/800936#file-tmux-conf

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

set-option -g history-limit 10000

setw -g mode-bg black
#of try "xterm-256color" # "screen-256color"
set-option -g default-terminal "xterm-256color" 
set-option -g pane-active-border-fg green

# utf8 support
set-window-option -g utf8 on

set-window-option -g xterm-keys on  # not sure why ...

# use mode vi in copy or choice modes
set-window-option -g mode-keys vi
set-window-option -g monitor-activity on
set-window-option -g window-status-current-fg white
setw -g window-status-current-attr reverse

# Automatically set window title
setw -g automatic-rename

# vi movement keys
# set-option -g status-keys vi

############################################################################
# Status Bar
############################################################################
# set -g status off
set-option -g status-utf8 on
set-option -g status-justify right
set-option -g status-bg black # colour213 # pink
set-option -g status-fg cyan
set-option -g status-interval 5
set-option -g status-left-length 30
set-option -g status-left '#[fg=magenta]» #[fg=blue,bold]#T#[default]'
set-option -g status-right '#[fg=red,bold][[ #(git branch) branch ]] #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]%R %m-%d#(acpi | cut -d ',' -f 2)#[default]'
set-option -g visual-activity on

# Titles (window number, program name, active (or not)
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'


############################################################################
# Unbindings
############################################################################
#unbind [ # copy mode bound to escape key
unbind j
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split


############################################################################
# Bindings
############################################################################

# new split in current pane (horizontal / vertical)
bind-key - split-window -v # split pane horizontally
bind-key \ split-window -h # split pane vertically

# promote a pane to its own window
bind-key Enter break-pane

#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split

############################################################################
# windows
############################################################################
set-window-option -g window-status-current-bg red
bind-key C-p previous-window
bind-key C-n next-window

# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session, even if both clients are looking
# at different windows.  It seems that in this particular case, Screen has the
# better default where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on

############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Resizing ---------------------------------------------------------------
bind-key C-h resize-pane -L
bind-key C-j resize-pane -D
bind-key C-k resize-pane -U
bind-key C-l resize-pane -R
